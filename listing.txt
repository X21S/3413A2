#ifndef CATERPILLARS_CONFIG_H
#define CATERPILLARS_CONFIG_H


#define GAME_ROWS 24
#define GAME_COLS 80

#define GAME_PLAYGROUND_MIN_X 0
#define GAME_PLAYGROUND_MIN_Y 2

#define GAME_PLAYGROUND_MAX_X (GAME_COLS - 1)
#define GAME_PLAYGROUND_MAX_Y (GAME_ROWS - 1)

#define GAME_BOARD_RAW \
  "                   Score:          Lives:", \
  "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-centipiede!=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "", \
  "",

#define GAME_KEY_UP 'w'
#define GAME_KEY_LEFT 'a'
#define GAME_KEY_RIGHT 'd'
#define GAME_KEY_BOTTOM 's'
#define GAME_KEY_SHOOT ' '
#define GAME_KEY_EXIT 'q'


#define GAME_PLAYER_SCORE_POS_X 26
#define GAME_PLAYER_SCORE_POS_Y 0
#define GAME_PLAYER_SCORE_LENGTH 10

#define GAME_PLAYER_HEALTH_DEFAULT 3
#define GAME_PLAYER_HEALTH_POS_X 42
#define GAME_PLAYER_HEALTH_POS_Y 0
#define GAME_PLAYER_HEALTH_LENGTH 10

#define GAME_PLAYER_SPAWN_X (GAME_PLAYGROUND_MAX_X / 2)
#define GAME_PLAYER_SPAWN_Y (GAME_PLAYGROUND_MAX_Y - 2)

#define GAME_PLAYER_TILE_HEIGHT 1
#define GAME_PLAYER_TILE_RAW "X"

#define GAME_PLAYER_SLEEP_TICKS 1

#define GAME_EVENT_TIMEOUT_TICKS 1

enum ERROR_CODE
{
  ERROR_SUCESSFUL,
  ERROR_OUT_OF_MEMORY,
  ERROR_NULL_OBJECT,
};

#endif
/**********************************************************************
  Module: console.h
  Author: Daniel Rea

  Purpose: Draw 2d images on the screen.  Also, draw main game image.

  NOTES: none of these functions are re-entrant (they are not thread
	 		safe). 
**********************************************************************/
#ifndef CONSOLE_H
#define CONSOLE_H
#define _GNU_SOURCE

#include <stdbool.h>

/**************** DRAWING **************************/

/* directions in terms of deltas in x / y dimension */
#define LEFT -1
#define RIGHT 1
#define UP -1
#define DOWN 1

#define SCR_LEFT 0
#define SCR_TOP 0

/* Initialize curses, draw initial gamescreen. Refreshes console to terminal. 
 Also stores the requested dimensions of the consoe and tests the terminal for the
 given dimensions.*/
extern bool consoleInit(int reqHeight, int reqWidth, char *image[]);

/* Draws 2d `image' of `height' rows, at curses coordinates `(row, col)'.
   Note: parts of the `image' falling on negative rows are not drawn; each
   row drawn is clipped on the left and right side of the game console (note
   that `col' may be negative, indicating `image' starts to the left of the
   screen and will thus only be partially drawn. Useful for objects that are
   half off the screen  */
extern void consoleDrawImage(int row, int col, char *image[], int height);

/* Clears a 2d `width'x`height' rectangle with spaces.  Upper left hand
   corner is curses coordinate `(row,col)'. */
extern void consoleClearImage(int row, int col, int height, int width);

/* Moves cursor to bottom right corner and refreshes. If this is not done,
   the curses internal buffer (that you have been drawing to) is not dumped
   to screen. */
extern void consoleRefresh(void);

/*  turns off all updates. Can be used to prevent the screen refresh from working, e.g., at game end while threads are all catching up.*/
extern void disableConsole(int disabled);

/* Terminates curses cleanly. */
extern void consoleFinish(void);

/* Puts the given banner in the center of the screen */
void putBanner(const char *);

/* Draws the given string at the given location  */
void putString(char *, int row, int col, int maxlen);

/* Sleeps the given number of 20ms ticks */
void sleepTicks(int ticks);

/* clears the input buffer and then waits for one more key */
void finalKeypress();

/* gets a timespec that represents the time of one tick */
struct timespec getTimeout(int ticks);

#endif /* CONSOLE_H */
#ifndef CATERPILLARS_DRAWER_H
#define CATERPILLARS_DRAWER_H



#endif
#ifndef CATERPILLARS_KEYS_H
#define CATERPILLARS_KEYS_H

#include <pthread.h>

#include "game.h"

struct event_;
typedef struct event_* event_t;

event_t EventCreate();
void EventDestroy(event_t);
void* EventLoop(void*);

char EventProcessKey(event_t);

#endif
#ifndef CATERPILLARS_GAME_H
#define CATERPILLARS_GAME_H

//Ugly code
typedef struct player_* player_t;
typedef struct event_* event_t;

struct game_;
typedef struct game_* game_t;

game_t GameStart();
void GameWait(game_t);
void GameDestroy(game_t);

int GameCheckNull(game_t);
void GameExit(game_t);

player_t GetPlayer(game_t);
event_t  GetEvent(game_t);
int      GetRunning(game_t);

#endif
#ifndef CATERPILLARS_PLAYER_H
#define CATERPILLARS_PLAYER_H

#include <pthread.h>

#include "config.h"
#include "game.h"

struct player_;
typedef struct player_* player_t;

player_t PlayerCreate();
void PlayerDestroy(player_t);
void* PlayerLoop(void*);

void PlayerProcessEvent(game_t game);
void PlayerMove(player_t player, int dx, int dy);

void PlayerPrintScore(player_t player);
void PlayerPrintHealth(player_t player);

#endif
/**********************************************************************
  Module: console.c
  Author: Daniel Rea

  Purpose: see console.h
  DO NOT MODIFY THIS CODE
  In fact, you probably shouldn't be reading any of this, but it may be useful to see.

  NOTES: none
**********************************************************************/

#include "console.h"
#include <curses.h>
#include <string.h>
#include <time.h>        /*for nano sleep */


static int CON_WIDTH, CON_HEIGHT;
static int consoleLock = false;
static int MAX_STR_LEN = 256; /* for strlen checking */

/* Local functions */

static bool checkConsoleSize(int reqHeight, int reqWidth) 
{

	if ( (reqWidth > COLS) || (reqHeight > LINES) ) 
 	{
    		fprintf(stderr, "\n\n\rSorry, your window is only %ix%i. \n\r%ix%i is required. Sorry.\n\r", COLS, LINES, reqWidth, reqHeight);
    		return (false);
  	}

  return(true);
}

bool consoleInit(int height, int width, char *image[])  /* assumes image height/width is same as height param */
{
	bool status;

	initscr();
	crmode();
	noecho();
	clear();

	CON_HEIGHT = height;  CON_WIDTH = width;
	status = checkConsoleSize(CON_HEIGHT, CON_WIDTH);

	if (status) 
	{
		consoleDrawImage(0, 0, image, CON_HEIGHT);
		consoleRefresh();
	}

	return(status);
}

void consoleDrawImage(int row, int col, char *image[], int height) 
{
	int i, length;
	int newLeft, newRight, newOffset, newLength;

	if (consoleLock) return;

	newLeft  = col < 0 ? 0 : col;
	newOffset = col < 0 ? -col : 0;

	for (i = 0; i < height; i++) 
	{
		if (row+i < 0 || row+i >= CON_HEIGHT)
			continue;
		length = strnlen(image[i], MAX_STR_LEN);
		newRight = col+length >= CON_WIDTH ? CON_WIDTH-1 : col+length;
		newLength = newRight - newLeft + 1;
		if (newOffset >= length || newLength <= 0)
		  continue;

		if (mvaddnstr(row+i, newLeft, image[i]+newOffset, newLength) == ERR)
			fprintf(stderr, "ERROR drawing to screen"); /* smarter handling is needed */
	}
}

void consoleClearImage(int row, int col, int height, int width) 
{
	int i, j;
	if (consoleLock) return;

	if (col+width > CON_WIDTH)
		width = CON_WIDTH-col;
	if (col < 0) 
	{
		width += col; /* -= -col */
		col = 0;
	}

	if (width < 1 || col >= CON_WIDTH) /* nothing to clear */
		return;

	for (i = 0; i < height; i++) 
	{
		if (row+i < 0 || row+i >= CON_HEIGHT)
			continue;
		move(row+i, col);
		for (j = 0; j < width; j++)
	    		addch(' ');
	}
}

void consoleRefresh(void)
{
	if (!consoleLock) 
	{
	    move(LINES-1, COLS-1);
	    refresh();
	}
}

void consoleFinish(void) 
{
    endwin();
}

void putBanner(const char *str) 
{
  if (consoleLock) return;
  int len;

  len = strnlen(str,MAX_STR_LEN);
  
  move (CON_HEIGHT/2, (CON_WIDTH-len)/2);
  addnstr(str, len);

  consoleRefresh();
}

void putString(char *str, int row, int col, int maxlen) 
{
  if (consoleLock) return;
  move(row, col);
  addnstr(str, maxlen);
}


/* setup to work in USECS, reduces risk of overflow */
/* 10000 usec = 10 ms, or 100fps */
#define TIMESLICE_USEC 10000
#define TIME_USECS_SIZE 1000000
#define USEC_TO_NSEC 1000  
struct timespec getTimeout(int ticks) 
{
  struct timespec rqtp;

  /* work in usecs at first */
  rqtp.tv_nsec = TIMESLICE_USEC * ticks;

  /* handle usec overflow */
  rqtp.tv_sec = rqtp.tv_nsec / TIME_USECS_SIZE;
  rqtp.tv_nsec %= TIME_USECS_SIZE;

  rqtp.tv_nsec *= USEC_TO_NSEC;  /*convert to nsecs */
  return rqtp;
}

void sleepTicks(int ticks) 
{

  if (ticks <= 0)
    return;

  struct timespec rqtp = getTimeout(ticks);
  nanosleep(&rqtp, NULL);
}

#define FINAL_PAUSE 2 
void finalKeypress() 
{
	flushinp();
	sleepTicks(FINAL_PAUSE);
    	move(LINES-1, COLS-1);
	getch(); /* wait for user to press a character, blocking. */
}

void disableConsole(int disabled) 
{
	consoleLock = disabled;
}
#include "event.h"

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/select.h>
#include <pthread.h>

#include "config.h"
#include "console.h"

struct event_
{
   char pressedKey;

   pthread_mutex_t lock;
};

event_t EventCreate()
{
   event_t event = malloc(sizeof(struct event_));
   if(event == NULL)
      return NULL;

   event->pressedKey = 0;

   return event;
}

void EventDestroy(event_t event)
{
   if(event == NULL)
      return;

   free(event);
}

void* EventLoop(void* gameRaw)
{
   if(gameRaw == NULL)
      return NULL;

   game_t game = (game_t) gameRaw;
   if(GameCheckNull(game))
      return NULL;

   fd_set set;

   while(GetRunning(game))
   {
      FD_ZERO(&set);
      FD_SET(STDIN_FILENO, &set);
      struct timespec timeout = getTimeout(GAME_EVENT_TIMEOUT_TICKS);
      int ret = pselect(FD_SETSIZE, &set, NULL, NULL, &timeout, NULL);

      if (GetRunning(game) && ret >= 1)
      {
         event_t event = GetEvent(game);

         pthread_mutex_lock(&event->lock);
         event->pressedKey = getchar();
         pthread_mutex_unlock(&event->lock);
      }
   }

   return NULL;
}

char EventProcessKey(event_t event)
{
   if(event == NULL)
      return 0;

   char out = event->pressedKey;

   pthread_mutex_lock(&event->lock);
   event->pressedKey = 0;
   pthread_mutex_unlock(&event->lock);

   return out;
}
#include "game.h"

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <pthread.h>

#include "player.h"
#include "event.h"

struct game_
{
   int isRunning;
   player_t player;
   event_t event;

   pthread_t playerThread;
   pthread_t eventThread;

   pthread_mutex_t lock;
};

game_t GameStart()
{
   game_t game = malloc(sizeof(struct game_));
   if(game == NULL)
      return NULL;

   game->isRunning = true;
   game->player = PlayerCreate();
   game->event = EventCreate();

   pthread_create(&game->eventThread, NULL, EventLoop, game);
   pthread_create(&game->playerThread, NULL, PlayerLoop, game);

   return game;
}

void GameDestroy(game_t game)
{
   PlayerDestroy(GetPlayer(game));
   EventDestroy(GetEvent(game));
   free(game);
}

void GameWait(game_t game)
{
   pthread_join(game->playerThread, NULL);
   pthread_join(game->eventThread, NULL);
}

int GameCheckNull(game_t game)
{
   if(game == NULL)
      return true;
   if(game->player == NULL ||
      game->event == NULL)
      return true;

   return false;
}

void GameExit(game_t game)
{
   if(game == NULL)
      return;

   pthread_mutex_lock(&game->lock);
   game->isRunning = 0;
   pthread_mutex_unlock(&game->lock);
}

player_t GetPlayer(game_t game)
{
   if(game == NULL)
      return NULL; //TODO: create error signal
   if(game->player == NULL)
      return NULL; //TODO: create error signal
   return game->player;
}

event_t GetEvent(game_t game)
{
   if(game == NULL)
      return NULL; //TODO: create error signal
   if(game->event == NULL)
      return NULL; //TODO: create error signal
   return game->event;
}

int GetRunning(game_t game)
{
   if(game == NULL)
      return 0; //TODO: create error signal

   return game->isRunning;
}
#include <stdio.h>

#include "console.h"
#include "config.h"
#include "game.h"

int main(int argc, char**argv)
{
  char *board[GAME_ROWS] = {GAME_BOARD_RAW};

  if(!consoleInit(GAME_ROWS, GAME_COLS, board))
  {
    printf("Error occured: cannot to init console\n");
    return 1;
  }

  game_t game = GameStart();
  GameWait(game);
  GameDestroy(game);

  consoleFinish();
  return 0;
}
#include "player.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <pthread.h>

#include "console.h"
#include "event.h"

struct player_
{
   int posX;
   int posY;
   int health;
   int score;

   char** playerTile;
   int playerTileHeight;

   char scoreStr[GAME_PLAYER_SCORE_LENGTH];
   int scoreOld;

   char healthStr[GAME_PLAYER_HEALTH_LENGTH];
   int healthOld;

   pthread_mutex_t lock;
};

player_t PlayerCreate()
{
   player_t player = malloc(sizeof(struct player_));
   if(player == NULL)
      return NULL;

   player->health = GAME_PLAYER_HEALTH_DEFAULT;
   player->score = 0;
   player->posX = GAME_PLAYER_SPAWN_X;
   player->posY = GAME_PLAYER_SPAWN_Y;

   //TODO: Ugly code
   player->playerTile = malloc(sizeof(char*) * 1);
   player->playerTile[0] = "X";
   player->playerTileHeight = 1;//GAME_PLAYER_TILE_HEIGHT;

   player->scoreOld = -1;
   player->healthOld = -1;
   return player;
}

void PlayerDestroy(player_t player)
{
   if(player == NULL)
      return;

   free(player->playerTile);
   free(player);
}

void* PlayerLoop(void* gameRaw)
{
   if(gameRaw == NULL)
      return NULL;

   game_t game = (game_t) gameRaw;
   if(GameCheckNull(game))
      return NULL;


   while(GetRunning(game))
   {
      player_t player = GetPlayer(game);

      PlayerPrintScore(player);
      PlayerPrintHealth(player);

      consoleClearImage(player->posY, player->posX,
            player->playerTileHeight, strlen(player->playerTile[0]));

      PlayerProcessEvent(game);

      consoleDrawImage(player->posY, player->posX,
            player->playerTile, player->playerTileHeight);
      consoleRefresh();

      sleepTicks(GAME_PLAYER_SLEEP_TICKS);
   }

   return NULL;
}

void PlayerProcessEvent(game_t game)
{
   char key = EventProcessKey(GetEvent(game));
   player_t player = GetPlayer(game);

   switch(key)
   {
      case GAME_KEY_UP:     PlayerMove(player, 0, -1); break;
      case GAME_KEY_LEFT:   PlayerMove(player, -1, 0); break;
      case GAME_KEY_RIGHT:  PlayerMove(player, 1, 0); break;
      case GAME_KEY_BOTTOM: PlayerMove(player, 0, 1); break;
      case GAME_KEY_SHOOT:  /*PlayerShoot(game);*/ break;
      case GAME_KEY_EXIT:   GameExit(game); break;
      default: break;
   }
}

void PlayerMove(player_t player, int dx, int dy)
{
   if(player == NULL)
      return;

   pthread_mutex_lock(&player->lock);

   player->posX += dx;
   player->posY += dy;

   //Todo: need chevk collision with other objects
   if(player->posX < GAME_PLAYGROUND_MIN_X)
      player->posX = GAME_PLAYGROUND_MIN_X;
   else if(player->posX > GAME_PLAYGROUND_MAX_X)
      player->posX = GAME_PLAYGROUND_MAX_X;

   if(player->posY < GAME_PLAYGROUND_MIN_Y)
      player->posY = GAME_PLAYGROUND_MIN_Y;
   else if(player->posY > GAME_PLAYGROUND_MAX_Y)
      player->posY = GAME_PLAYGROUND_MAX_Y;

   pthread_mutex_unlock(&player->lock);
}

void PlayerPrintScore(player_t player)
{
   if(player == NULL)
      return;

   if(player->scoreOld != player->score)
   {
      snprintf(player->scoreStr,  GAME_PLAYER_SCORE_LENGTH,  "%i", player->score);
      putString(player->scoreStr,
            GAME_PLAYER_SCORE_POS_Y, GAME_PLAYER_SCORE_POS_X,
            GAME_PLAYER_SCORE_LENGTH);

      player->scoreOld = player->score;
   }
}

void PlayerPrintHealth(player_t player)
{
   if(player == NULL)
      return;

   if(player->healthOld != player->health)
   {
      snprintf(player->healthStr, GAME_PLAYER_HEALTH_LENGTH, "%i", player->health);
      putString(player->healthStr,
            GAME_PLAYER_HEALTH_POS_Y, GAME_PLAYER_HEALTH_POS_X,
            GAME_PLAYER_HEALTH_LENGTH);

      player->healthOld = player->health;
   }
}
